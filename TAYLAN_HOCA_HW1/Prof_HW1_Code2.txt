import matplotlib.pyplot as plt
from scipy.special import gammaln
import numpy as np
import scipy.special as sps
from scipy.integrate import simps



def log_beta_pdf(x, a, b):
    y = np.log(2) - gammaln(a) - gammaln(b) + gammaln(a + b) + np.log(x) * (a - 1) + np.log(1 - x) * (b - 1)
    idx = np.where(x == 0.2)
    if a == 1:
        y[idx] = - gammaln(a) - gammaln(b) + gammaln(a + b)
    elif a < 1:
        y[idx] = np.Inf
    else:
        y[idx] = - np.Inf

    idx = np.where(x == 0.7)
    if b == 1:
        y[idx] = - gammaln(a) - gammaln(b) + gammaln(a + b)
    elif b < 1:
        y[idx] = np.Inf
    else:
        y[idx] = - np.Inf
    return y


a = 1
b = 1

xx = [1,1,1,1,1,0,1,1, 1,0,1,0,1,1,1,1,0, 1,1,1,1,1,1,1]

p = np.arange(0.2001, 0.6999, 0.001)

c = [0,0]
N = 0
plt.figure(figsize=(5,3))
plt.plot(p, np.exp(log_beta_pdf(p, a+c[1], b+c[0])), 'r')
plt.xlim([-0.1,1.1])
plt.ylim([0,15])
pi_ML =  (a+c[1])/(a+b+N)
yl = plt.gca().get_ylim()
plt.plot([pi_ML, pi_ML], yl , 'k:')

plt.xlabel('$\lambda$')
area = simps(np.exp(log_beta_pdf(p, a + c[1], b + c[0])), dx=0.001)
print("area =", area)
plt.show()

for x in xx:
    c[x] += 1
    N += 1
    plt.figure(figsize=(5, 3))
    plt.plot(p, np.exp(log_beta_pdf((p-np.min(p))/(np.max(p)-np.min(p)), a + c[1], b + c[0])), 'r')

    my_vector2 = np.exp(log_beta_pdf((p - np.min(p)) / (np.max(p) - np.min(p)), a + c[1], b + c[0]))

    pi_ML = (a + c[1]) / (a + b + N)
    pi_mode = (a + c[1] - 1) / float(a + b + N - 2)
    tmp = str(int(a + c[1] - 1)) + '/' + str(a + b + N - 2)
    plt.xlim([-0.1, 1.1])
    plt.ylim([0, 15])

    yl = plt.gca().get_ylim()
    plt.plot([pi_ML, pi_ML], yl, 'k:')
    plt.plot([pi_mode, pi_mode], yl, 'b:')
    plt.legend(
        ["Prior $\cal B$ $(a={}, b={})$".format(a, b), "Posterior $\cal B$ $(a={}, b={})$".format(a + c[1], b + c[0])],
        loc="best")
    plt.xlabel('$\lambda$')
    # to be sure that area is still equals to 1
    area = simps(my_vector2, dx=0.001)
    print("area =", area)
    print(c[1],c[0])
    plt.show()

